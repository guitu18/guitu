package com.guitu18.handler;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.guitu18.beans.BeanManager;
import com.guitu18.common.Constants;
import com.guitu18.common.JsonResult;
import com.guitu18.exception.MyException;
import com.guitu18.http.Request;
import com.guitu18.mapping.HandlerMethodMapping;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.handler.codec.http.*;
import io.netty.handler.codec.http.multipart.*;
import io.netty.util.CharsetUtil;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 前端控制器DispatcherHandler
 *
 * @author zhangkuan
 * @date 2019/8/19
 */
public class DispatcherHandler extends SimpleChannelInboundHandler<FullHttpRequest> {

    @Override
    protected void channelRead0(ChannelHandlerContext context, FullHttpRequest fullHttpRequest) throws Exception {
        // Request包装
        Request request = new Request(fullHttpRequest);
        JSONObject jsonResult = new JSONObject();
        // GET请求
        if (Constants.RequestMethod.GET.equalsIgnoreCase(request.getMethod())) {
            Method method = getHandler(request);
            // 解析请求参数并注入
            QueryStringDecoder queryStringDecoder = new QueryStringDecoder(URLDecoder.decode(request.getUri(), "utf-8"));
            Object[] objects = parseParameter(method, queryStringDecoder);
            Object invoke;
            if (objects != null) {
                invoke = method.invoke(BeanManager.getInstance().getBean(method.getDeclaringClass()), objects);
            } else {
                invoke = method.invoke(BeanManager.getInstance().getBean(method.getDeclaringClass()));
            }
            System.out.println("invoke = " + invoke);
            jsonResult = JSONObject.parseObject(JSONObject.toJSONString(invoke));
        }
        // POST请求
        else if (Constants.RequestMethod.POST.equalsIgnoreCase(request.getMethod())) {
            HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(fullHttpRequest);
            decoder.offer(fullHttpRequest);
            List<InterfaceHttpData> params = decoder.getBodyHttpDatas();
            for (InterfaceHttpData param : params) {
                Attribute data = (Attribute) param;
            }
        }
        response(context, HttpResponseStatus.OK, jsonResult);
    }

    /**
     * 根据请求路径获取处理器
     *
     * @param request
     * @return
     * @throws MyException
     */
    private Method getHandler(Request request) throws MyException {
        // 获取请求路径
        String mapping = request.getUri().substring(0, request.getUri().indexOf("?"));
        return HandlerMethodMapping.getInstance().getMethod(mapping);
    }

    /**
     * 解析请求参数
     *
     * @param method
     * @param queryStringDecoder
     * @throws Exception
     */
    private Object[] parseParameter(Method method, QueryStringDecoder queryStringDecoder) throws Exception {
        Parameter[] parameters = method.getParameters();
        Object[] args = new Object[parameters.length];
        Map<String, List<String>> query = queryStringDecoder.parameters();
        for (int i = 0; i < args.length; i++) {
            List<String> list = query.get(parameters[i].getName());
            args[i] = list.get(0);
        }
        return args;
    }


    /**
     * 获取GET方式传递的参数
     *
     * @param fullHttpRequest
     * @return
     */
    private Map<String, Object> getGetParamsFromChannel(FullHttpRequest fullHttpRequest) {
        Map<String, Object> params = new HashMap<>();
        if (fullHttpRequest.method() == HttpMethod.GET) {
            // 处理get请求
            QueryStringDecoder decoder = new QueryStringDecoder(fullHttpRequest.uri());
            Map<String, List<String>> paramList = decoder.parameters();
            for (Map.Entry<String, List<String>> entry : paramList.entrySet()) {
                params.put(entry.getKey(), entry.getValue().get(0));
            }
            return params;
        } else {
            return null;
        }

    }

    /**
     * 解析from表单数据（Content-Type = x-www-form-urlencoded）
     *
     * @param fullHttpRequest
     * @return
     */
    private Map<String, Object> getFormParams(FullHttpRequest fullHttpRequest) {
        Map<String, Object> params = new HashMap<String, Object>();

        HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(new DefaultHttpDataFactory(false), fullHttpRequest);
        List<InterfaceHttpData> postData = decoder.getBodyHttpDatas();

        for (InterfaceHttpData data : postData) {
            if (data.getHttpDataType() == InterfaceHttpData.HttpDataType.Attribute) {
                MemoryAttribute attribute = (MemoryAttribute) data;
                params.put(attribute.getName(), attribute.getValue());
            }
        }
        return params;
    }

    /**
     * 获取POST方式传递的参数
     *
     * @param fullHttpRequest
     * @return
     */
    private Map<String, Object> getPostParamsFromChannel(FullHttpRequest fullHttpRequest) {

        Map<String, Object> params = new HashMap<String, Object>();

        if (fullHttpRequest.method() == HttpMethod.POST) {
            // 处理POST请求
            String strContentType = fullHttpRequest.headers().get("Content-Type").trim();
            if (strContentType.contains("x-www-form-urlencoded")) {
                params = getFormParams(fullHttpRequest);
            } else if (strContentType.contains("application/json")) {
                try {
                    params = getJSONParams(fullHttpRequest);
                } catch (UnsupportedEncodingException e) {
                    return null;
                }
            } else {
                return null;
            }
            return params;
        } else {
            return null;
        }
    }

    /**
     * 解析json数据（Content-Type = application/json）
     *
     * @param fullHttpRequest
     * @return
     * @throws UnsupportedEncodingException
     */
    private Map<String, Object> getJSONParams(FullHttpRequest fullHttpRequest) throws UnsupportedEncodingException {
        Map<String, Object> params = new HashMap<String, Object>();

        ByteBuf content = fullHttpRequest.content();
        byte[] reqContent = new byte[content.readableBytes()];
        content.readBytes(reqContent);
        String strContent = new String(reqContent, "UTF-8");

        JSONObject jsonParams = JSONObject.parseObject(strContent);
        for (Object key : jsonParams.keySet()) {
            params.put(key.toString(), jsonParams.get(key));
        }

        return params;
    }

    /**
     * 异常处理
     *
     * @param ctx
     * @param cause
     * @throws Exception
     */
    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
        cause.printStackTrace();
        if (cause instanceof MyException) {
            JsonResult error = JsonResult.error(404, ((MyException) cause).getMsg());
            response(ctx, HttpResponseStatus.NOT_FOUND, (JSONObject) JSON.toJSON(error));
        }
        response(ctx, HttpResponseStatus.INTERNAL_SERVER_ERROR, (JSONObject) JSON.toJSON(JsonResult.error()));
    }

    /**
     * 相应请求
     *
     * @param context
     * @param status
     * @param json
     */
    private void response(ChannelHandlerContext context, HttpResponseStatus status, JSONObject json) {
        // 创建http响应
        FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, status,
                Unpooled.copiedBuffer(json.toString(), CharsetUtil.UTF_8));
        // 设置头信息
        response.headers().set(HttpHeaderNames.CONTENT_TYPE, "application/json; charset=UTF-8");
        // 将相应写到客户端
        context.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
    }

}
