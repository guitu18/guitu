package reflect;

import com.guitu18.core.interceptor.HandlerInterceptor;
import com.guitu18.core.reflect.ClassScanner;
import com.guitu18.module.interceptor.MyInterceptor;
import lombok.Data;
import org.junit.Test;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashSet;
import java.util.Set;

/**
 * @author zhangkuan
 * @date 2019/8/19
 */
@Data
public class ClassScannerTest {

    private static String field1 = "test_field1";
    public static String field2 = "test_field2";

    public String say(String name) {
        System.out.println("name = " + name);
        return "hello world";
    }

    @Test
    public void test1() {
        Set<Class> set = new HashSet<Class>();
        ClassScanner.scanner("com.guitu18", set);
        System.out.println("set = " + set);
    }

    @Test
    public void test2() {
        MyInterceptor interceptor = new MyInterceptor();
        boolean insss = interceptor instanceof HandlerInterceptor;
        System.out.println("b = " + insss);
    }

    @Test
    public void test3() throws IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchMethodException {
        Class<ClassScannerTest> clazz = ClassScannerTest.class;
        Method method = clazz.getMethod("say", String.class);
        Class<?>[] parameterTypes = method.getParameterTypes();
        Object[] args = new Object[]{123};
        Object invoke = method.invoke(clazz.newInstance(), args);
        System.out.println("invoke = " + invoke);
    }

    @Test
    public void test4() throws NoSuchFieldException, IllegalAccessException {
        Member member = new Member();
        System.out.println("member = " + member);
        Class<? extends Member> clazz = member.getClass();
        Field age = clazz.getDeclaredField("age");
        age.setAccessible(true);
        Object obj1 = 27;
        Object obj2 = "27";
        age.set(member, obj1);
        Class<?> type = age.getType();
        System.out.println("member.getAge() = " + member.getAge());
    }

    @Data
    public class Member {
        private String name;
        private Integer age;
    }


}
