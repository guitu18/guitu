package com.guitu18.handler;

import com.alibaba.fastjson.JSONObject;
import com.guitu18.beans.BeanManager;
import com.guitu18.common.Constants;
import com.guitu18.common.JsonResult;
import com.guitu18.exception.MyException;
import com.guitu18.http.Request;
import com.guitu18.mapping.HandlerMethodMapping;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.handler.codec.http.*;
import io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;
import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder;
import io.netty.handler.codec.http.multipart.InterfaceHttpData;
import io.netty.handler.codec.http.multipart.MemoryAttribute;
import io.netty.util.CharsetUtil;
import org.apache.log4j.Logger;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.lang.reflect.Parameter;
import java.net.URLDecoder;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 前端控制器DispatcherHandler
 *
 * @author zhangkuan
 * @date 2019/8/19
 */
public class DispatcherHandler extends SimpleChannelInboundHandler<FullHttpRequest> {

    private Logger log = Logger.getLogger(this.getClass());

    @Override
    protected void channelRead0(ChannelHandlerContext context, FullHttpRequest fullHttpRequest) throws Exception {
        log.info(fullHttpRequest.method().name() + " " + fullHttpRequest.uri() + " " + fullHttpRequest.protocolVersion().toString());
        // 获取Handler
        Method method = getHandler(fullHttpRequest);
        // 从请求参数中获取Method需要的参数
        Object[] objects = getMethodArgs(method, fullHttpRequest);
        Object invoke;
        if (objects != null) {
            invoke = method.invoke(BeanManager.getInstance().getBean(method.getDeclaringClass()), objects);
        } else {
            invoke = method.invoke(BeanManager.getInstance().getBean(method.getDeclaringClass()));
        }
        response(context, HttpResponseStatus.OK, JSONObject.toJSONString(invoke));
    }

    /**
     * 根据请求路径获取处理器
     *
     * @param fullHttpRequest
     * @return
     * @throws MyException
     */
    private Method getHandler(FullHttpRequest fullHttpRequest) throws MyException {
        // 获取请求路径
        String mapping = fullHttpRequest.uri();
        if (mapping.contains("?")) {
            mapping = mapping.substring(0, mapping.indexOf("?"));
        }
        return HandlerMethodMapping.getInstance().getMethod(mapping);
    }

    /**
     * 从请求参数中获取Method需要的参数
     *
     * @param method
     * @throws Exception
     */
    private Object[] getMethodArgs(Method method, FullHttpRequest fullHttpRequest) throws Exception {
        Parameter[] parameters = method.getParameters();
        if (parameters.length == 0) {
            return null;
        }
        Map<String, List<String>> queryMap = parseParameter(fullHttpRequest);
        // 获取请求参数并注入到方法形参
        Object[] args = new Object[parameters.length];
        for (int i = 0; i < parameters.length; i++) {
            List<String> list = queryMap.get(parameters[i].getName());
            args[i] = list == null ? null : list.get(0);
        }
        return args;
    }

    /**
     * 解析请求参数
     *
     * @param fullHttpRequest
     * @return
     * @throws UnsupportedEncodingException
     */
    private Map<String, List<String>> parseParameter(FullHttpRequest fullHttpRequest) throws UnsupportedEncodingException {
        Request request = new Request(fullHttpRequest);
        Map<String, List<String>> queryMap = new HashMap<>();
        // GET请求
        if (Constants.RequestMethod.GET.equalsIgnoreCase(request.getMethod())) {
            // 获取URL中的参数
            String decode = URLDecoder.decode(request.getUri(), "utf-8");
            QueryStringDecoder query = new QueryStringDecoder(decode);
            queryMap = query.parameters();
        }
        // POST请求
        else if (Constants.RequestMethod.POST.equalsIgnoreCase(request.getMethod())) {
            String contentType = request.getHeaders().get(Constants.ContentType.CONTENT_TYPE);
            // 解析from表单数据 Content-Type = x-www-form-urlencoded
            if (Constants.ContentType.FORM_URLENCODED.equalsIgnoreCase(contentType)) {
                HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(new DefaultHttpDataFactory(false), fullHttpRequest);
                List<InterfaceHttpData> postData = decoder.getBodyHttpDatas();
                for (InterfaceHttpData data : postData) {
                    if (data.getHttpDataType() == InterfaceHttpData.HttpDataType.Attribute) {
                        MemoryAttribute attribute = (MemoryAttribute) data;
                        queryMap.put(attribute.getName(), Collections.singletonList(attribute.getValue()));
                    }
                }
            }
            // 解析json数据 Content-Type = application/json
            else if (Constants.ContentType.APPLICATION_JSON.equalsIgnoreCase(contentType)) {
                ByteBuf content = fullHttpRequest.content();
                byte[] reqContent = new byte[content.readableBytes()];
                content.readBytes(reqContent);
                JSONObject jsonParams = JSONObject.parseObject(new String(reqContent, "UTF-8"));
                for (Object key : jsonParams.keySet()) {
                    queryMap.put(key.toString(), Collections.singletonList(jsonParams.get(key).toString()));
                }
            }
        }
        return queryMap;
    }

    /**
     * 响应请求
     *
     * @param context
     * @param status
     * @param result
     */
    private void response(ChannelHandlerContext context, HttpResponseStatus status, String result) {
        // 创建http响应
        FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, status,
                Unpooled.copiedBuffer(result, CharsetUtil.UTF_8));
        // 设置头信息
        response.headers().set(HttpHeaderNames.CONTENT_TYPE, "application/json; charset=UTF-8");
        // 将相应写到客户端
        context.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);
    }

    /**
     * 异常处理
     *
     * @param ctx
     * @param cause
     * @throws Exception
     */
    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
        if (cause instanceof MyException) {
            log.error(((MyException) cause).getMsg());
            JsonResult error = JsonResult.error(404, ((MyException) cause).getMsg());
            response(ctx, HttpResponseStatus.NOT_FOUND, JSONObject.toJSONString(error));
            return;
        }
        cause.printStackTrace();
        response(ctx, HttpResponseStatus.INTERNAL_SERVER_ERROR, JSONObject.toJSONString(JsonResult.error()));
    }

}
