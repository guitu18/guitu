package com.guitu18.beans;

import com.guitu18.reflect.ClassScanner;
import org.apache.log4j.Logger;

import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

/**
 * BeanManager
 *
 * @author zhangkuan
 * @date 2019/8/19
 */
public class BeanManager {

    private Logger log = Logger.getLogger(this.getClass());

    private static BeanManager beanManager;

    private static Map<String, Object> beanMap = new ConcurrentHashMap<>();

    private BeanManager() {
    }

    /**
     * 获取BeanManager单例实例
     *
     * @return
     */
    public static BeanManager getInstance() {
        if (beanManager == null) {
            synchronized (BeanManager.class) {
                if (beanManager == null) {
                    beanManager = new BeanManager();
                }
            }
        }
        return beanManager;
    }

    /**
     * 初始化IOC容器
     *
     * @param rootClass
     */
    public void init(Class rootClass) {
        log.info(">>>>>>>>>>>>> BeanManager.init()... >>>>>>>>>>>>>");
        Set<Class> classSet = ClassScanner.getClasses(rootClass.getPackage().getName());
        for (Class clazz : classSet) {
            try {
                // 扫描HandlerMapping映射
                ClassScanner.scanHandlerMapping(clazz);
                // 初始化并保存实例映射
                Object instance = clazz.newInstance();
                beanMap.put(clazz.getName(), instance);
            } catch (Exception ignored) {
            }
        }
    }

    /**
     * 根据名称获取Bean
     *
     * @param name
     * @return
     * @throws Exception
     */
    public Object getBean(String name) throws Exception {
        return beanMap.get(name);
    }

    /**
     * 根据类型获取Bean
     *
     * @param clazz
     * @param <T>
     * @return
     * @throws Exception
     */
    public <T> T getBean(Class<T> clazz) throws Exception {
        return (T) getBean(clazz.getName());
    }

}
